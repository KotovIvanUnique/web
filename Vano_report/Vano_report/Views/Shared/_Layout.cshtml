@inject Microsoft.ApplicationInsights.AspNetCore.JavaScriptSnippet JavaScriptSnippet
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    @*<title>@ViewData["Title"] - Синтаксис CSS</title>*@

    <environment names="Development">
        <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.css" />
        <link rel="stylesheet" href="~/css/site.css" />
        @*timber Style*@ 
        <link rel="stylesheet" type="text/css" href="css/bootstrap.css">
        <link rel="stylesheet" type="text/css" href="css/font-awesome.css">
        <link rel='stylesheet' id='camera-css' href='css/camera.css' type='text/css' media='all'>

        <link rel="stylesheet" type="text/css" href="css/slicknav.css">
        <link rel="stylesheet" href="css/prettyPhoto.css" type="text/css" media="screen" title="prettyPhoto main stylesheet" charset="utf-8" />
        <link rel="stylesheet" type="text/css" href="css/style.css">
        <script type="text/javascript" src="js/jquery-1.8.3.min.js"></script>
        <script type="text/javascript" src="js/jquery.mobile.customized.min.js"></script>
        <script type="text/javascript" src="js/jquery.easing.1.3.js"></script>
        <script type="text/javascript" src="js/camera.min.js"></script>
        <script type="text/javascript" src="js/myscript.js"></script>
        <script src="js/sorting.js" type="text/javascript"></script>
        <script src="js/jquery.isotope.js" type="text/javascript"></script>
        <script id="tinyhippos-injected">if (window.top.ripple) { window.top.ripple("bootstrap").inject(window, document); }</script><!--<![endif]-->
        <link href='http://fonts.googleapis.com/css?family=Roboto:400,300,700|Open+Sans:700' rel='stylesheet' type='text/css'>
        <!--script type="text/javascript" src="js/jquery.nav.js"></script-->
        <script>
            jQuery(function () {
                jQuery('#camera_wrap_1').camera({
                    transPeriod: 500,
                    time: 3000,
                    height: '490px',
                    thumbnails: false,
                    pagination: true,
                    playPause: false,
                    loader: false,
                    navigation: false,
                    hover: false
                });
            });
        </script>
    </environment>
    
    @Html.Raw(JavaScriptSnippet.FullScript)
</head>
<body>
    <div id="home">
        <div class="headerLine">
            <div id="menuF" class="default">
                <div class="container">
                    <div class="row">
                        <div class="logo col-md-4">
                            <div>
                                <a href="#">  </a>
                            </div>
                        </div>
                        <div class="col-md-8">
                            <div class="navmenu" style="text-align: center;">
                                <ul id="menu">
                                    <li><a href="#Sintax">Синтаксис CSS</a></li>
                                    <li><a href="#Styles">Правила применения стилей</a></li>
                                    <li><a href="#Selectors">Селекторы CSS</a></li>                                                                      
                                    <li><a href="~/Home/Contact">Обратная связь</a></li>
                                    <!--li><a href="#features">Features</a></li-->
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>


        <div id="Sintax">
            <div class="container">
                <div class="row">
                    <h2>Синтаксис CSS</h2>
                    <p>Целью CSS является определение макета и стиля элементов HTML. Стилевые правила записываются в собственном формате, отличном от HTML. Основным понятием выступает селектор — это шаблон, который используется для выбора одного или нескольких элементов HTML и применения к ним параметров форматирования. Общий способ записи имеет следующий вид.  Синтаксис очень прост:</p>
                    <pre class="no-result"><code data-language="css" class="rainbow"><span class="comment">/* Правила CSS */</span>
селектор { свойство: значение; }</code></pre>
                    <p>Вы можете прочитать это так:</p>
                    <pre class="no-result"><code data-language="css" class="rainbow">кто { что: как; }</code></pre>
                    <p>CSS представляет собой процесс из трёх частей:</p>
                    <link type="text/css" rel="stylesheet" href="~/css/example1.css" media="all">
                    <link type="text/css" rel="stylesheet" href="~/css/example2.css" media="all">
                    <link type="text/css" rel="stylesheet" href="~/css/example3.css" media="screen">
                    <ul><li><strong>селектор</strong> определяет, на какой элемент или элементы нацелиться;</li><li><strong>свойство</strong> определяет характеристики для изменения;Стилевые свойства разделяются между собой точкой с запятой, в конце этот символ можно опустить.</li><li><strong>значение</strong> определяет, как изменить эту характеристику.</li></ul>
                    <p>Весь этот блок (селектор, свойство, значение) является <strong>правилом CSS</strong>.</p>
                    <h2>Быстрый пример</h2>
                    <p>Допустим, вы хотите изменить цвет всех <span class="tag">&lt;blockquote&gt;</span>.</p>
                    <p data-height="265" data-theme-id="0" data-slug-hash="aLMBqX" data-default-tab="html,result" data-user="zombiecait" data-embed-version="2" data-pen-title="aLMBqX" class="codepen">See the Pen <a href="https://codepen.io/zombiecait/pen/aLMBqX/">aLMBqX</a> by zombiecait (<a href="https://codepen.io/zombiecait"></a>) on <a href="https://codepen.io">CodePen</a>.</p>
                    <script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>
                    <p>Сосредоточьтесь на <strong>имени тега</strong> (и забудьте об угловых скобках &lt;&gt; и тексте). В нашем случае останется только blockquote. Есть прямая связь между именем тега и селектором.</p>
                    <p>Давайте используем его в нашем CSS как <strong>селектор</strong> и применим некоторые стили:</p>
                    <pre class="no-result"><code data-language="css" class="rainbow"><span class="entity name tag">blockquote</span> {
<span class="support css-property">background</span>: <span class="support css-value">lightgreen</span>;
<span class="support css-property">color</span>: <span class="support css-value">darkgreen</span>;
}</code></pre>
                    <p>Здесь произошли две вещи:</p>
                    <p>Тег <span class="tag">&lt;blockquote&gt;</span> это <strong>блочный</strong> элемент и у него есть <strong>строчный</strong> аналог <span class="tag">&lt;q&gt;</span>. Поскольку оба они служат одной цели (но в разных ситуациях), мы хотели бы стилизовать их одинаково. Для этого мы могли бы скопировать и вставить правила CSS, а затем просто изменить селектор, но есть, как вы уже догадались, более быстрый способ:</p>
                    <pre class="no-result"><code data-language="css" class="rainbow"><span class="entity name tag">q</span>,
<span class="entity name tag">blockquote</span> {
<span class="support css-property">background</span>: <span class="support css-value">lightgreen</span>;
<span class="support css-property">color</span>: <span class="support css-value">darkgreen</span>;
}</code></pre>
                    <p>Теперь у нас есть два селектора и два свойства. Следовательно, мы имеем набор селекторов и набор свойств (с соответствующими значениями).</p>
                    <p class="callout primary">У нас может быть несколько селекторов, несколько свойств, а иногда (но редко) несколько значений.</p>
                    <h2>Комментарии</h2>
                    <p>Как и в HTML может быть удобно писать комментарии CSS:</p>
                    <pre class="no-result"><code data-language="css" class="rainbow"><span class="comment">/* Это комментарий CSS */</span>
<span class="entity name tag">q</span>,
<span class="entity name tag">blockquote</span> {
<span class="support css-property">background</span>: <span class="support css-value">lightgreen</span>;
<span class="support css-property">color</span>: <span class="support css-value">darkgreen</span>;}
<span class="comment">/*
Комментарии предназначены только для чтения людьми
и компьютер их разбирать не будет
*/</span></code></pre>
                    <p data-height="265" data-theme-id="0" data-slug-hash="Oxqbap" data-default-tab="css,result" data-user="zombiecait" data-embed-version="2" data-pen-title="Oxqbap" class="codepen">See the Pen <a href="https://codepen.io/zombiecait/pen/Oxqbap/">Oxqbap</a> by zombiecait (<a href="https://codepen.io/zombiecait"></a>) on <a href="https://codepen.io">CodePen</a>.</p>
                    <script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>
                    <p>CSS не чувствителен к регистру, переносу строк, пробелам и символам табуляции, поэтому форма записи зависит от желания разработчика. Так, в следующем примере показаны две разновидности оформления селекторов и их правил.</p>
                    <p data-height="265" data-theme-id="0" data-slug-hash="zEbwZJ" data-default-tab="html,result" data-user="zombiecait" data-embed-version="2" data-pen-title="zEbwZJ" class="codepen">See the Pen <a href="https://codepen.io/zombiecait/pen/zEbwZJ/">zEbwZJ</a> by zombiecait (<a href="https://codepen.io/zombiecait"></a>) on <a href="https://codepen.io">CodePen</a>.</p>
                    <script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>
                    <p>В данном примере свойства селектора <span class="tag">h1</span> записаны в одну строку без пробелов, а для селектора <span class="tag">h2</span> каждое свойство располагается на отдельной строке. Во втором случае проще отыскивать нужные свойства и править их по необходимости, но при этом незначительно возрастает объём данных за счёт активного использования пробелов и переносов строк. Обычно при разработке сайта используют наиболее удобную и наглядную форму записи, а уже перед публикацией сайта из стилевого файла для сокращения его объёма удаляются все пробелы и переносы строк.</p>                    
                            </div>
                        </div>
                    </div>
                    <div id="Styles">
                        <div class="container">
                            <div class="row">
                                <h2>Правила применения стилей</h2>
                                <p>Далее приведены некоторые правила, которые необходимо знать при описании стиля.</p>
                                <h3>Форма записи</h3>
                                <p>Для селектора допускается добавлять каждое стилевое свойство и его значение по отдельности, как это показано в следующем примере.</p>
                                <p class="exampleTitle">Пример. Расширенная форма записи</p>
                                <pre class="no-result"><code data-language="css" class="rainbow"><span class="entity name tag">td</span> { <span class="support css-property">background</span>: <span class="support css-value">olive</span>; }
<span class="entity name tag">td</span> { <span class="support css-property">color</span>: <span class="support css-value">white</span>; }
<span class="entity name tag">td</span> { <span class="support css-property">border</span>: <span class="constant numeric">1</span><span class="keyword unit">px</span> solid black; }</code></pre>
                                <p>Однако такая запись не очень удобна. Приходится повторять несколько раз один и тот же селектор, да и легко запутаться в их количестве. Поэтому практичнее писать все свойства для каждого селектора вместе. Указанный набор записей в таком случае получит следующий вид.</p>
                                <p class="exampleTitle">Пример. Компактная форма записи</p>
                                <pre class="no-result">
                                <code data-language="css" class="rainbow">
<span class="entity name tag">td</span> 
{
<span class="support css-property">background</span>:<span class="support css-value">olive</span>;<span class="comment">/* Оливковый цвет фона */</span>
<span class="support css-property">color</span>:<span class="support css-value">white</span>;<span class="comment">/* Белый цвет текста */</span>
<span class="support css-property">border</span>:<span class="constant numeric">1</span>
<span class="keyword unit">px</span> solid black;<span class="comment">/* Чёрная рамка */</span>
}
    </code>
</pre>
                                <p>Эта форма записи более наглядная и удобная в использовании.</p>
                                <h3>Имеет приоритет значение, указанное в коде ниже</h3>
                                <p>Если для селектора вначале задаётся свойство с одним значением, а затем то же свойство, но уже с другим значением, то применяться будет то значение, которое в коде CSS установлено ниже.</p>
                                <p class="exampleTitle">Пример. Разные значения у одного свойства</p>
                                <pre class="no-result"><code data-language="css" class="rainbow"><span class="entity name tag">p</span> { <span class="support css-property">color</span>: <span class="support css-value">green</span>; <span class="comment">/* Зелёный цвет текста */</span> }
<span class="entity name tag">p</span> { <span class="support css-property">color</span>: <span class="support css-value">red</span>; <span class="comment">/* Красный цвет текста */</span> }</code></pre>
                                <p>В данном примере для селектора p цвет текста вначале установлен зелёным, а затем красным. Поскольку значение <span class="value">red</span> расположено ниже, то оно в итоге и будет применяться к тексту.</p>
                                <p>На деле такой записи лучше вообще избегать и удалять повторяющиеся значения. Но подобное может произойти случайно, к примеру, в случае подключения разных стилевых файлов, в которых содержатся одинаковые селекторы.</p>
                                <h3>Значения</h3>
                                <p>У каждого свойства может быть только соответствующее его целям значение. Например, для <span class="attribute">color</span>, который устанавливает цвет текста, в качестве значений недопустимо использовать числа.</p>
                            </div>
                        </div>
                    </div>
                    <div id="Selectors">
                        <div class="container">
                            <div class="row">
                                <h2>Селекторы CSS</h2>
                                <p>Поскольку мы не хотим стилизовать все наши элементы HTML одновременно, нам требуется возможность <strong>выбрать</strong> подмножество этих элементов.</p>
                                <p>Селекторы CSS определяют, к каким элементам мы хотим применить стиль.</p>
                                <h2>Базовые селекторы тегов</h2>
                                <p>Нацелиться на базовые теги HTML легко: просто используйте имя тега.</p>
                                <pre class="no-result"><code data-language="css" class="rainbow">
<span class="entity name tag">a</span> { <span class="comment">/* Ссылки */</span> }
<span class="entity name tag">p</span> { <span class="comment">/* Абзацы */</span> }
<span class="entity name tag">ul</span> { <span class="comment">/* Неупорядоченные списки */</span> }
<span class="entity name tag">li</span> { <span class="comment">/* Пункты списка */</span> }</code></pre>
                                <p>Есть прямая связь между именем тега HTML и используемым селектором CSS.</p>
                                <h2>Классы</h2>
                                <p>Учитывая, что мы, вероятно, не желаем стилизовать все абзацы или все заголовки одинаково, нам надо их различать.</p>
                                <p>Из всех атрибутов HTML атрибут <span class="attribute">class</span> является наиболее важным для CSS. Он позволяет определить <strong>группу</strong> элементов HTML, на которые мы можем точно нацелиться. Просто поставьте точку перед именем класса который вы хотите использовать:</p>
                                <pre class="no-result"><code data-language="css" class="rainbow"><span class="entity name class">.date</span> {
 <span class="support css-property">color</span>: <span class="support css-value">red</span>;}</code></pre>
                                <p>С другой стороны есть атрибут HTML <span class="attribute">class</span> со значением <span class="value">date</span>. Он должен совпадать с именем класса CSS.</p>
                                <p class="note">Вы можете использовать любое имя для вашего класса, но оно не должно начинаться с цифры.</p>
                                <p>Селектор класса <span class="class">.date</span> будет нацелен на все элементы HTML с атрибутом <span class="var">class="date"</span>. Таким образом, следующие элементы HTML <strong>все</strong> будут стилизованы:</p>
                                <pre class="no-result"><code data-language="html" class="rainbow"><span class="support tag"><span class="support tag">&lt;</span><span class="support tag-name">p</span></span> <span class="support attribute">class</span><span class="support operator">=</span><span class="string quote">"</span><span class="string value">date</span><span class="string quote">"</span><span class="support tag close">&gt;</span>
                      21 февраля, суббота
<span class="support tag"><span class="support tag">&lt;</span><span class="support tag special">/</span><span class="support tag-name">p</span></span><span class="support tag close">&gt;</span>
<span class="support tag"><span class="support tag">&lt;</span><span class="support tag-name">p</span></span><span class="support tag close">&gt;</span>
Мероприятие произойдёт в <span class="support tag"><span class="support tag">&lt;</span><span class="support tag-name">em</span></span> <span class="support attribute">class</span><span class="support operator">=</span><span class="string quote">"</span><span class="string value">date</span><span class="string quote">"</span><span class="support tag close">&gt;</span>субботу<span class="support tag"><span class="support tag">&lt;</span><span class="support tag special">/</span><span class="support tag-name">em</span></span><span class="support tag close">&gt;</span>.
        <span class="support tag"><span class="support tag">&lt;</span><span class="support tag special">/</span><span class="support tag-name">p</span></span><span class="support tag close">&gt;</span></code></pre>
                                <p>Имейте в виду, что имя тега <strong>не важно</strong>, учитывается только атрибут <span class="attribute">class</span>.</p>
                                <h2>Идентификаторы</h2>
                                <p>Можно также использовать атрибут <span class="attribute">id</span> в вашем HTML и определить его в вашем CSS с помощью решётки:</p>
                                <p class="exampleTitle">CSS</p>
                                <pre class="no-result"><code data-language="css" class="rainbow"><span class="entity name id">#tagline</span>{ <span class="support css-property">color</span>: <span class="support css-value">orange</span>;}</code></pre>
                                <p class="exampleTitle">HTML</p>
                                <pre class="no-result"><code data-language="html" class="rainbow"><span class="support tag"><span class="support tag">&lt;</span><span class="support tag-name">h1</span></span> <span class="support attribute">id</span><span class="support operator">=</span><span class="string quote">"</span><span class="string value">tagline</span><span class="string quote">"</span><span class="support tag close">&gt;</span>Этот заголовок будет оранжевым.<span class="support tag"><span class="support tag">&lt;</span><span class="support tag special">/</span><span class="support tag-name">h1</span></span><span class="support tag close">&gt;</span></code></pre>
                                <p>Идентификаторы похожи на классы, так как они тоже основаны на атрибуте HTML.</p>
                                <h2>Пример</h2>
                                <table>
                                    <thead><tr><th>HTML</th><th>Возможные селекторы</th><th>Что это значит</th></tr></thead>
                                    <tbody>
                                        <tr><td><pre class="no-result">&lt;p&gt;&lt;/p&gt;</pre></td><td>p</td><td>Каждый &lt;p&gt;</td></tr>
                                        <tr><td><pre class="no-result">&lt;div class="global"&gt;&lt;/div&gt;</pre></td><td>div<br> .global<br> div.global</td><td>Каждый&nbsp;&lt;div&gt;<br> Каждый элемент с class=”global”<br> Каждый&nbsp;&lt;div&gt;&nbsp;с&nbsp;class=”global”</td></tr>
                                        <tr><td><pre class="no-result">&lt;ul id="menu"&gt;</pre></td><td>#menu<br> ul#menu</td><td>Только элемент с id=”menu”<br> Только элемент&nbsp;&lt;ul&gt;&nbsp;с&nbsp;id=”menu”</td></tr>
                                        <tr>
                                            <td>
                                                <pre class="no-result">&lt;ol class="dico"&gt;
                                          &lt;li&gt;Un cobaye&lt;/li&gt;
                                          &lt;li&gt;Des cobaux&lt;/li&gt;
                                        &lt;/ol&gt;</pre>
                                            </td>
                                            <td>li<br> ol li<br> .dico li</td>
                                            <td>Каждый&nbsp;&lt;li&gt;<br> Каждый&nbsp;&lt;li&gt;&nbsp;внутри предка &lt;ol&gt;<br> Каждый&nbsp;&lt;li&gt;&nbsp;внутри предка с class="dico"</td>
                                        </tr>
                                    </tbody>
                                </table>
                                <h2>Объединение селекторов</h2>
                                <p>Давайте воспользуемся нашим предыдущим примером, в котором мы хотим сделать наши даты красными:</p>
                                <pre class="no-result"><code data-language="html" class="rainbow"><span class="support tag"><span class="support tag">&lt;</span><span class="support tag-name">p</span></span> <span class="support attribute">class</span><span class="support operator">=</span><span class="string quote">"</span><span class="string value">date</span><span class="string quote">"</span><span class="support tag close">&gt;</span>
21 февраля, суббота
<span class="support tag"><span class="support tag">&lt;</span><span class="support tag special">/</span><span class="support tag-name">p</span></span><span class="support tag close">&gt;</span>
<span class="support tag"><span class="support tag">&lt;</span><span class="support tag-name">p</span></span><span class="support tag close">&gt;</span>
Мероприятие произойдёт в <span class="support tag"><span class="support tag">&lt;</span><span class="support tag-name">em</span></span> <span class="support attribute">class</span><span class="support operator">=</span><span class="string quote">"</span><span class="string value">date</span><span class="string quote">"</span><span class="support tag close">&gt;</span>субботу<span class="support tag"><span class="support tag">&lt;</span><span class="support tag special">/</span><span class="support tag-name">em</span></span><span class="support tag close">&gt;</span>.
<span class="support tag"><span class="support tag">&lt;</span><span class="support tag special">/</span><span class="support tag-name">p</span></span><span class="support tag close">&gt;</span></code></pre>
                                <p>Если мы захотим вместо этого, чтобы наши даты внутри <span class="tag">&lt;em&gt;</span> отображались синим цветом? Мы можем добавить следующее правило CSS:</p>
                                <pre class="no-result"><code data-language="css" class="rainbow"><span class="entity name tag">em</span><span class="entity name class">.date</span> {
 <span class="support css-property">color</span>: <span class="support css-value">blue</span>;}</code></pre>
                                <p><span class="var">em.date</span> объединяет в себе:</p>
                                <ul><li>селектор тега <span class="tag">em</span>;</li><li>селектор класса <span class="class">.date</span>.</li></ul>
                                <p>Он будет применяться только к элементам <span class="var">&lt;em class="date"&gt;&lt;/em&gt;</span>. Это не повлияет на другие <span class="class">.date</span> или <span class="tag">&lt;em&gt;</span>.</p>
                                <h2>Иерархия селекторов</h2>
                                <p>Пробел в селекторе определяет отношение предок/потомок. Скажем, мы хотим, чтобы ссылки в нашем заголовке были красного цвета:</p>
                                <pre class="no-result"><code data-language="css" class="rainbow"><span class="entity name tag">header</span> <span class="entity name tag">a</span> {
 <span class="support css-property">color</span>: <span class="support css-value">red</span>;}</code></pre>
                                <p>Это можно читать справа налево как: «выбрать все элементы <span class="tag">&lt;a&gt;</span>, которые находятся внутри элемента <span class="tag">&lt;header&gt;</span>». Это заставит все другие ссылки (которые не в заголовке) оставаться неизменными.</p>
                                <h2>Псевдоклассы</h2>
                                <p>Элементы HTML могут иметь разные состояния. Наиболее распространённый случай&nbsp;— когда вы наводите курсор на ссылку. В CSS возможно применить другой стиль, когда происходит такое событие.</p>
                                <p>Псевдоклассы привязаны к обычным селекторам и начинаются с двоеточия:</p>
                                <pre class="no-result"><code data-language="css" class="rainbow"><span class="entity name tag">a</span> {
<span class="support css-property">color</span>: <span class="support css-value">blue</span>;}
<span class="entity name tag">a</span><span class="entity name pseudo">:hover</span> {
<span class="support css-property">color</span>: <span class="support css-value">red</span>;
}</code></pre>
                            </div>
                        </div>
                    </div>                

                <div class="container body-content">
                    @RenderBody()
                    <hr />
                    @*<footer>
                        <p>&copy; 2017 - Vano_report</p>
                    </footer>*@
                </div>

                <environment names="Development">
                    <script src="js/jquery.prettyPhoto.js" type="text/javascript" charset="utf-8"></script>
                    <script src="js/bootstrap.min.js"></script>
                    <script src="js/jquery.slicknav.js"></script>
                    <script>
                        $(document).ready(function () {
                            $(".bhide").click(function () {
                                $(".hideObj").slideDown();
                                $(this).hide(); //.attr()
                                return false;
                            });
                            $(".bhide2").click(function () {
                                $(".container.hideObj2").slideDown();
                                $(this).hide(); // .attr()
                                return false;
                            });

                            $('.heart').mouseover(function () {
                                $(this).find('i').removeClass('fa-heart-o').addClass('fa-heart');
                            }).mouseout(function () {
                                $(this).find('i').removeClass('fa-heart').addClass('fa-heart-o');
                            });

                            function sdf_FTS(_number, _decimal, _separator) {
                                var decimal = (typeof (_decimal) != 'undefined') ? _decimal : 2;
                                var separator = (typeof (_separator) != 'undefined') ? _separator : '';
                                var r = parseFloat(_number)
                                var exp10 = Math.pow(10, decimal);
                                r = Math.round(r * exp10) / exp10;
                                rr = Number(r).toFixed(decimal).toString().split('.');
                                b = rr[0].replace(/(\d{1,3}(?=(\d{3})+(?:\.\d|\b)))/g, "\$1" + separator);
                                r = (rr[1] ? b + '.' + rr[1] : b);

                                return r;
                            }

                            setTimeout(function () {
                                $('#counter').text('0');
                                $('#counter1').text('0');
                                $('#counter2').text('0');
                                setInterval(function () {

                                    var curval = parseInt($('#counter').text());
                                    var curval1 = parseInt($('#counter1').text().replace(' ', ''));
                                    var curval2 = parseInt($('#counter2').text());
                                    if (curval <= 707) {
                                        $('#counter').text(curval + 1);
                                    }
                                    if (curval1 <= 12280) {
                                        $('#counter1').text(sdf_FTS((curval1 + 20), 0, ' '));
                                    }
                                    if (curval2 <= 245) {
                                        $('#counter2').text(curval2 + 1);
                                    }
                                }, 2);

                            }, 500);
                        });
                    </script>
                    <script type="text/javascript">
                        jQuery(document).ready(function () {
                            jQuery('#menu').slicknav();

                        });
                    </script>

                    <script type="text/javascript">
                        $(document).ready(function () {

                            var $menu = $("#menuF");

                            $(window).scroll(function () {
                                if ($(this).scrollTop() > 100 && $menu.hasClass("default")) {
                                    $menu.fadeOut('fast', function () {
                                        $(this).removeClass("default")
                                            .addClass("fixed transbg")
                                            .fadeIn('fast');
                                    });
                                } else if ($(this).scrollTop() <= 100 && $menu.hasClass("fixed")) {
                                    $menu.fadeOut('fast', function () {
                                        $(this).removeClass("fixed transbg")
                                            .addClass("default")
                                            .fadeIn('fast');
                                    });
                                }
                            });
                        });
    //jQuery
                    </script>
                    <script>
                        /*menu*/
                        function calculateScroll() {
                            var contentTop = [];
                            var contentBottom = [];
                            var winTop = $(window).scrollTop();
                            var rangeTop = 200;
                            var rangeBottom = 500;
                            $('.navmenu').find('a').each(function () {
                                contentTop.push($($(this).attr('href')).offset().top);
                                contentBottom.push($($(this).attr('href')).offset().top + $($(this).attr('href')).height());
                            })
                            $.each(contentTop, function (i) {
                                if (winTop > contentTop[i] - rangeTop && winTop < contentBottom[i] - rangeBottom) {
                                    $('.navmenu li')
                                        .removeClass('active')
                                        .eq(i).addClass('active');
                                }
                            })
                        };

                        $(document).ready(function () {
                            calculateScroll();
                            $(window).scroll(function (event) {
                                calculateScroll();
                            });
                            $('.navmenu ul li a').click(function () {
                                $('html, body').animate({ scrollTop: $(this.hash).offset().top - 80 }, 800);
                                return false;
                            });
                        });
                    </script>
                    <script>

                        jQuery(document).ready(function () {
                            jQuery(".pretty a[rel^='prettyPhoto']").prettyPhoto({ animation_speed: 'normal', theme: 'light_square', slideshow: 3000, autoplay_slideshow: true, social_tools: '' });

                        });
                    </script>

                </environment>

                @RenderSection("Scripts", required: false)
</body>

</html>
